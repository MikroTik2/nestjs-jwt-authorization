generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id String @id @default(uuid())

  email    String  @unique
  password String?

  lastname    String?
  displayName String  @map("display_name")

  phone String?

  role UserRole @default(USER)

  emailVerification EmailVerification?
  passwordReset     PasswordReset?

  externalAccounts ExternalAccount[]

  mfa MultiFactorAuthentication?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("users")
}

model ExternalAccount {
  id String @id @default(uuid())

  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")

  refreshToken String? @map("refresh_token")
  accessToken  String? @map("access_token")
  expiry       Int?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, provider])
  @@map("external_accounts")
}

model EmailVerification {
  id String @id @default(uuid())

  token  String    @unique
  expiry DateTime?

  status EmailVerificationStatus @default(PENDING)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("email_verification")
}

model PasswordReset {
  id String @id @default(uuid())

  token  String   @unique
  expiry DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("password_resets")
}

model MultiFactorAuthentication {
  id String @id @default(uuid())

  recoveryCodes String[] @default([]) @map("recovery_codes")

  totp   Totp?   @relation(fields: [totpId], references: [id], onDelete: Cascade)
  totpId String? @unique @map("totp_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("multi_factor_authentication")
}

model Totp {
  id String @id @default(uuid())

  status TotpStatus @default(DISABLED)
  secret String?

  mfa MultiFactorAuthentication?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("totps")
}

enum UserRole {
  USER
  ADMIN

  @@map("user_roles")
}

enum AccountProvider {
  GOOGLE
  FACEBOOK

  @@map("account_providers")
}

enum EmailVerificationStatus {
  PENDING
  VERIFIED

  @@map("email_verification_statuses")
}

enum TotpStatus {
  DISABLED
  PENDING
  ENABLED

  @@map("totp_statuses")
}
